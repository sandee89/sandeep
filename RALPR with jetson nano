
# Real-time License Plate Recognition on Jetson Nano
import cv2
import easyocr
import numpy as np
from datetime import datetime

# Initialize OCR reader
reader = easyocr.Reader(['en'])

# Initialize webcam (0 = default USB camera)
cap = cv2.VideoCapture(0)

# Function to detect and extract license plates
def detect_plate(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.bilateralFilter(gray, 11, 17, 17)
    edged = cv2.Canny(blur, 30, 200)

    contours, _ = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
    
    plate_img = None
    for c in contours:
        approx = cv2.approxPolyDP(c, 10, True)
        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(c)
            plate_img = frame[y:y + h, x:x + w]
            return plate_img, (x, y, w, h)
    return None, None

# Main loop
print("Starting license plate recognition...")
while True:
    ret, frame = cap.read()
    if not ret:
        break

    plate_img, box = detect_plate(frame)
    if plate_img is not None:
        result = reader.readtext(plate_img)
        for (bbox, text, prob) in result:
            if prob > 0.4:
                x, y, w, h = box
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(frame, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
                
                # Save to file or DB
                with open("plates_log.csv", "a") as f:
                    f.write(f"{datetime.now()}, {text}\n")

    cv2.imshow("Jetson Nano - License Plate Recognition", frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()


